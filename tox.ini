[tox]
skipsdist = True
envlist = lint,default
source_package=dhos_url_api
all_sources = {[tox]source_package} tests/ docs/
requires = tox-venv
    tox-docker>=2.0.0a3
provision_tox_env=provision

[flake8]
max-line-length = 100

[docker:db]
image = postgres:12-alpine
environment =
    POSTGRES_USER=dhos-url
    POSTGRES_DB=dhos-url
    POSTGRES_PASSWORD=TopSecretPassword
ports=15432:5432/tcp

[testenv:provision]
envdir={toxworkdir}/.provision

[testenv:poetry-install]
commands = poetry install

[testenv:default]
description = Installs all dependencies, verifies that lint tools would not change the code,
              runs security check programs then runs unit tests with coverage. Running `tox -e py39`
              does the same but without starting a database container.
docker = db
setenv= {[testenv]setenv}
        DATABASE_HOST=localhost
        DATABASE_PORT=15432

[testenv]
envdir = {toxworkdir}/py39

setenv = ENVIRONMENT=DEVELOPMENT
         LOG_LEVEL = DEBUG
         LOG_FORMAT = COLOUR
         FLASK_APP={[tox]source_package}/autoapp.py
         DATABASE_USER = dhos-url
         DATABASE_PASSWORD=TopSecretPassword
         DATABASE_NAME=dhos-url

passenv =
        CIRCLECI
        DATABASE_HOST
        DATABASE_PORT

allowlist_externals =
        bandit
        black
        coverage
        isort
        mypy
        npx
        poetry
        python
        safety
        sh
        true

commands = poetry install
           black --check {[tox]source_package} tests/
           isort --profile black {[tox]source_package}/ tests/ --check-only
           mypy {[tox]source_package} tests/
           bandit -r {[tox]source_package} -lll
           safety check
           coverage run --source {[tox]source_package} -m py.test {posargs}
           coverage report
           coverage xml -i -o coverage-reports/coverage.xml

list_dependencies_command = true

[testenv:lint]
description = Run `black`, `isort`, and `mypy` to clean up source files.
commands =
       black {[tox]all_sources}
       isort --profile black {[tox]all_sources}
       mypy {[tox]source_package} tests/ docs/

[testenv:debug]
description = Runs last failed unit tests only with debugger invoked on failure.
              Additional py.test command line arguments may given preceded by `--`,
              e.g. `tox -e debug -- -k sometestname -vv`
commands =
    pytest --lf --pdb {posargs}

docker = db
setenv = {[testenv:default]setenv}
    SQLALCHEMY_ECHO=true


[testenv:update]
description = Updates the `poetry.lock` file from `pyproject.toml`
commands = poetry update

[testenv:openapi]
description = Recreate API specification (openapi.yaml) from Flask blueprint
commands =
    poetry install
    python -m flask create-openapi {toxinidir}/{[tox]source_package}/openapi/openapi.yaml
    npx markdown-swagger {toxinidir}/{[tox]source_package}/openapi/openapi.yaml {toxinidir}/README.md


docker = db
setenv = {[testenv:default]setenv}

[testenv:flask]
description = Runs flask within the tox environment. Pass arguments after `--`.
    e.g. `tox -e flask -- --help` for a list of commands.
    Use this to create database migrations.
commands =
    poetry install
    python -m flask db upgrade
    python -m flask {posargs:--help}

docker = db
setenv = {[testenv:default]setenv}

[testenv:readme]
description = Updates the README file with database diagram and commands. (Requires graphviz `dot` is installed)
requires=sadisplay
commands =
    python docs/make_schema.py
    python docs/make-targets.py README.md
